// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
    SERVICE_PROVIDER
}

model Role {
    id           String        @id @default(cuid())
    displayName  String // Human-readable name (e.g., "Store Manager")
    roleName     String        @unique // System name (e.g., "store_manager")
    description  String?
    permissions  String[] // Array of permission strings
    users        User[]        @relation("UserRoles")
    orgId        String
    organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@index([roleName])
}

model User {
    id            String        @id @default(cuid())
    name          String
    firstName     String
    lastName      String
    phone         String        @unique
    email         String        @unique
    emailVerified DateTime?
    image         String?
    jobTitle      String?
    roles         Role[]        @relation("UserRoles") // Updated to support multiple roles
    password      String?
    status        Boolean       @default(true)
    accounts      Account[]
    sessions      Session[]
    savings       Saving[]
    blogs         Blog[]
    isVerfied     Boolean       @default(false)
    token         String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    roleId        String?
    orgId         String
    orgName       String?
    organisation  Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    location      Location?     @relation(fields: [locationId], references: [id])
    locationId    String?
    locationName  String?
}

model Organisation {
    id                 String     @id @default(cuid())
    name               String
    slug               String     @unique
    industry           String?
    country            String?
    state              String?
    address            String?
    currency           String?
    timezone           String?
    inventoryStartDate DateTime?
    fiscalYear         String?
    users              User[]
    invites            Invite[]
    roles              Role[]
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    units              Unit[]
    categories         Category[]
    items              Item[]
    brands             Brand[]
    taxRates           TaxRate[]
    suppliers          Supplier[]
    locations          Location[]
}

enum LocationType {
    WAREHOUSE
    SHOP
    VIRTUAL
}

model Location {
    id           String        @id @default(cuid())
    name         String
    type         LocationType
    address      String?
    email        String?
    phone        String?
    isActive     Boolean       @default(true)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    users        User[]
    orgId        String
    organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Invite {
    id           String       @id @default(cuid())
    email        String       @unique
    organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId        String
    status       Boolean      @default(false)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@map("Invites")
}

model Unit {
    id           String        @id @default(cuid())
    name         String
    symbol       String
    orgId        String
    organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    items        Item[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
}

model Brand {
    id           String        @id @default(cuid())
    name         String
    slug         String        @unique
    items        Item[]
    orgId        String
    organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
}

model TaxRate {
    id           String        @id @default(cuid())
    name         String
    rate         Float
    items        Item[]
    orgId        String
    organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
}

model Category {
    id           String        @id @default(cuid())
    title        String
    slug         String        @unique
    orgId        String
    organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    imageUrl     String?
    description  String?
    items        Item[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
}

enum SerialStatus {
    IN_STOCK
    SOLD
    RESERVED
    DAMAGED
    RETURNED
}

model SerialNumber {
    id              String       @id @default(cuid())
    serialNumber    String       @unique
    itemId          String
    item            Item         @relation(fields: [itemId], references: [id])
    status          SerialStatus @default(IN_STOCK)
    locationId      String?
    purchaseOrderId String?
    salesOrderId    String?
    notes           String?
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
}

model Item {
    id                String         @id @default(cuid())
    name              String
    sku               String         @unique
    barcode           String?        @unique
    description       String?
    upc               String?
    ean               String?
    mpn               String?
    isbn              String?
    categoryId        String?
    category          Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    unitOfMeasure     String? // unit name
    dimensions        String?
    weight            Float?
    costPrice         Float          @default(0)
    sellingPrice      Float          @default(0)
    minStockLevel     Int            @default(0)
    maxStockLevel     Int?
    isActive          Boolean        @default(true)
    isSerialTracked   Boolean        @default(false)
    serialNumbers     SerialNumber[]
    createdAt         DateTime       @default(now())
    updatedAt         DateTime?      @updatedAt
    unit              Unit?          @relation(fields: [unitId], references: [id])
    unitId            String?
    brand             Brand?         @relation(fields: [brandId], references: [id])
    brandId           String?
    taxRate           TaxRate?       @relation(fields: [taxRateId], references: [id])
    taxRateId         String?
    tax               Float
    suppliers         Supplier[]     @relation("SupplierItems")
    supplierRelations ItemSupplier[]
    orgId             String
    organisation      Organisation?  @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Supplier {
    id                String         @id @default(cuid())
    name              String
    contactPerson     String?
    email             String?
    phone             String?
    address           String?
    taxId             String?
    paymentTerms      String?
    notes             String?
    isActive          Boolean        @default(true)
    createdAt         DateTime       @default(now())
    updatedAt         DateTime?      @updatedAt
    items             Item[]         @relation("SupplierItems")
    supplierRelations ItemSupplier[]
    orgId             String
    organisation      Organisation?  @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model ItemSupplier {
    id               String    @id @default(cuid())
    itemId           String
    supplierId       String
    item             Item      @relation(fields: [itemId], references: [id])
    supplier         Supplier  @relation(fields: [supplierId], references: [id])
    isPreferred      Boolean   @default(false)
    supplierSku      String?
    leadTime         Int? // Lead time in days
    minOrderQty      Int? // Minimum order quantity
    unitPrice        Float? // Price per unit from supplier
    lastPurchaseDate DateTime?
    notes            String?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime? @updatedAt

    @@unique([itemId, supplierId])
}

model Saving {
    id          String    @id @default(cuid())
    amount      Int
    month       String
    name        String
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    paymentDate DateTime  @default(now())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
}

model Blog {
    id            String       @id @default(cuid())
    title         String
    slug          String       @unique
    description   String?      @db.Text // Meta description for SEO
    thumbnail     String?
    content       String?      @db.Text
    published     Boolean?     @default(false)
    featured      Boolean?     @default(false)
    author        User         @relation(fields: [authorId], references: [id])
    authorId      String
    authorName    String
    authorImage   String?
    authorTitle   String?
    category      BlogCategory @relation(fields: [categoryId], references: [id])
    categoryId    String
    categoryTitle String
    readingTime   Int? // Estimated reading time in minutes
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model BlogCategory {
    id        String   @id @default(cuid())
    name      String   @unique
    slug      String   @unique
    blogs     Blog[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
